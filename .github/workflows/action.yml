name: Build, Scan, and Secure Deploy
on:
  push:
    branches: main
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Image name to build'
        required: true
        type: string
        default: 'platform'

env:
  AWS_REGION: us-east-1
  DOCKER_HUB_USERNAME: owolabialiu

jobs:
  secure-build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (untagged)
        id: build
        run: |
          IMAGE_NAME="${{ inputs.image_name || 'platform' }}"
          BUILT_IMAGE="$IMAGE_NAME:latest"
          
          docker build -t "$BUILT_IMAGE" .
          echo "built_image=$BUILT_IMAGE" >> $GITHUB_OUTPUT

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: "image"
          format: "json"
          output: "trivy-report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ steps.build.outputs.built_image }}

      - name: Check vulnerabilities
        id: vuln-check
        run: |
          vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "trivy-report.json")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
          echo "needs_patching=$([[ "$vuln_count" -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Patch image with Copa
        if: steps.vuln-check.outputs.needs_patching == 'true'
        id: copa
        uses: project-copacetic/copa-action@v1.2.1
        with:
          image: ${{ steps.build.outputs.built_image }}
          image-report: "trivy-report.json"
          patched-tag: patched

      - name: Determine final image for scanning
        id: final-image
        run: |
          ORIGINAL_IMAGE="${{ steps.build.outputs.built_image }}"
          PATCHED_IMAGE="${{ steps.copa.outputs.patched-image }}"
          
          if [[ "${{ steps.vuln-check.outputs.needs_patching }}" == "true" && "${{ steps.copa.conclusion }}" == "success" && "$PATCHED_IMAGE" != "" ]]; then
            FINAL_IMAGE="$PATCHED_IMAGE"
          else
            FINAL_IMAGE="$ORIGINAL_IMAGE"
          fi
          
          echo "final_image=$FINAL_IMAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: "arn:aws:iam::908027403160:role/aws-inspector"

      - name: Scan with AWS Inspector
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        id: inspector
        with:
          artifact_type: 'container'
          artifact_path: ${{ steps.final-image.outputs.final_image }}
          critical_threshold: 1
          high_threshold: 1
          medium_threshold: 1
          low_threshold: 1
          other_threshold: 1
          display_vulnerability_findings: enabled
          output_sbom_path: ./sbom_output.json
          output_inspector_scan_path: ./inspector_scan_output.json

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            ./trivy-report.json
            ./sbom_output.json
            ./inspector_scan_output.json

      - name: Tag and push to Docker Hub
        run: |
          if [[ "${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}" == "true" ]]; then
            echo "❌ Security scan failed - vulnerabilities exceed threshold"
            exit 1
          fi
          
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ env.DOCKER_HUB_USERNAME }}" --password-stdin
          
          # Tag for Docker Hub
          FINAL_IMAGE="${{ steps.final-image.outputs.final_image }}"
          DOCKERHUB_IMAGE="${{ env.DOCKER_HUB_USERNAME }}/${{ inputs.image_name || 'platform' }}:latest"
          docker tag "$FINAL_IMAGE" "$DOCKERHUB_IMAGE"
          
          # Push to Docker Hub
          docker push "$DOCKERHUB_IMAGE"
          echo "✅ Image pushed to Docker Hub: $DOCKERHUB_IMAGE"
